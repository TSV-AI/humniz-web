generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
    output = "./generated"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String    @id @default(cuid())
  name             String?
  email            String    @unique
  emailVerified    DateTime?
  image            String?
  password         String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  
  // Credit and subscription fields
  credits          Int       @default(10) // Free trial: 10 credits
  subscriptionTier String    @default("free") // free, basic, pro, enterprise
  subscriptionId   String?   // For external billing system
  billingCycleEnd  DateTime?
  
  accounts         Account[]
  sessions         Session[]
  textProcesses    TextProcess[]
  usageHistory     UsageHistory[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model TextProcess {
  id              String   @id @default(cuid())
  userId          String
  originalText    String   @db.Text
  humanizedText   String?  @db.Text
  aiDetectionScore Float?  // 0-100 scale (average of all detectors)
  detectorResults Json?    // Individual detector scores: {gptZero: 4.2, huggingFace: 3.1, gltr: 2.8}
  status          String   @default("pending") // pending, processing, completed, failed
  creditsUsed     Int      @default(1)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UsageHistory {
  id               String   @id @default(cuid())
  userId           String
  action           String   // "humanize", "credit_purchase", "subscription_change"
  details          Json?    // Additional metadata
  creditsChanged   Int?     // Positive for purchases, negative for usage
  timestamp        DateTime @default(now())
  
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SubscriptionTier {
  id           String @id @default(cuid())
  name         String @unique
  displayName  String
  credits      Int    // Credits per billing cycle
  price        Float  // Price in USD
  features     Json   // JSON array of features
  isActive     Boolean @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}
